version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.14.0
  aws-ecs: circleci/aws-ecs@1.4.0
  terraform: circleci/terraform@1.1.0

envs: &envs
  environment:
    # Exporting environment variables and setting them as
    # TF_VAR prefixed names so we don't have to manually pass them to terraform via -var.

    # First, pass secrets from CircleCI project settings
    TF_VAR_aws_access_key: "${AWS_ACCESS_KEY_ID}"
    TF_VAR_aws_secret_key: "${AWS_SECRET_ACCESS_KEY}"
    TF_VAR_aws_region: "${AWS_REGION}"
    TF_VAR_aws_account_id: "${AWS_ACCOUNT_ID}"

    # Than pass settings in order to reuse them here and in Terraform, keeping them DRY
    TF_VAR_aws_ecr_repository_name: "ecr-playground-repo"
    TF_VAR_aws_ecs_cluster_name: "ecs-playground-cluster"
    TF_VAR_aws_ecs_stack_name: "ecs-playground-stack"
    TF_VAR_aws_ecs_task_web_name: "ecs-playground-task-web"
    TF_VAR_aws_ecs_service_web_name: "ecs-playground-service-web"

jobs:
  update-infrastructure:
    <<: *envs

    docker:
      - image: hashicorp/terraform:light

    steps:
      - checkout
      - run:
          name: Terraform init & apply
          command: |
            cd terraform-playground
            terraform init -backend-config="access_key=${AWS_ACCESS_KEY_ID}" -backend-config="secret_key=${AWS_SECRET_ACCESS_KEY}" -backend-config="region=${AWS_REGION}"
            terraform plan
            terraform apply -auto-approve

  update-image:
    <<: *envs

    docker:
      - image: circleci/python:3.8-buster

    steps:
      - aws-ecr/build-and-push-image:
          repo: "${TF_VAR_aws_ecr_repository_name}"
          skip-when-tags-exist: false
          tag: "latest,${CIRCLE_SHA1}"
          create-repo: true

  deploy-update:
    <<: *envs

    docker:
      - image: circleci/python:3.8-buster

    steps:
      - aws-ecs/update-service:
          family: "${TF_VAR_aws_ecs_task_web_name}"
          cluster-name: "${TF_VAR_aws_ecs_cluster_name}"
          service-name: "${TF_VAR_aws_ecs_service_web_name}"
          force-new-deployment: true
          #container-image-name-updates: "container=${AWS_ECS_SERVICE_NAME},tag=${CIRCLE_SHA1}"


workflows:
  build-and-deploy:
    jobs:
      - update-infrastructure
      - update-image
      - deploy-update:
          requires:
            - update-infrastructure
            - update-image
