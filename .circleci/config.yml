version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.14.0
  aws-ecs: circleci/aws-ecs@1.4.0
  terraform: circleci/terraform@1.1.0

commands:
  set-envs:
    description: Reusable command for setting up env vars
    steps:
      - run:
          name: Proxy env vars to Terraform vars
          command: |
            # Exporting environment variables and setting them as
            # TF_VAR prefixed names so we don't have to manually pass them to terraform via -var.

            # First, pass secrets from CircleCI project settings
            echo "export TF_VAR_aws_access_key=$AWS_ACCESS_KEY_ID" >> $BASH_ENV
            echo "export TF_VAR_aws_secret_key=$AWS_SECRET_ACCESS_KEY" >> $BASH_ENV
            echo "export TF_VAR_aws_region=$AWS_REGION" >> $BASH_ENV
            echo "export TF_VAR_aws_account_id=$AWS_ACCOUNT_ID" >> $BASH_ENV

            # Than pass settings in order to reuse them here and in Terraform, keeping them DRY
            echo "export TF_VAR_aws_ecr_repository_name=ecr-playground-repo" >> $BASH_ENV
            echo "export TF_VAR_aws_ecs_cluster_name=ecs-playground-cluster" >> $BASH_ENV
            echo "export TF_VAR_aws_ecs_stack_name=ecs-playground-stack" >> $BASH_ENV
            echo "export TF_VAR_aws_ecs_task_web_name=ecs-playground-task-web" >> $BASH_ENV
            echo "export TF_VAR_aws_ecs_service_web_name=ecs-playground-service-web" >> $BASH_ENV

  test-envs:
    description: Test setted env vars
    steps:
      - run:
          name: Echo some (probably) setted env vars
          command: |
            echo $AWS_REGION
            echo $TF_VAR_aws_region

            echo $TF_VAR_aws_ecr_repository_name
            echo $TF_VAR_aws_ecs_cluster_name
            echo $TF_VAR_aws_ecs_stack_name
            echo $TF_VAR_aws_ecs_task_web_name


jobs:
  update-infrastructure:
    docker:
      - image: hashicorp/terraform:light

    steps:
      - set-envs
      - test-envs
      - checkout
      - run:
          name: Terraform init & apply
          command: |
            cd terraform-playground
            terraform init -backend-config="access_key=${AWS_ACCESS_KEY_ID}" -backend-config="secret_key=${AWS_SECRET_ACCESS_KEY}"
            terraform plan
            terraform apply -auto-approve

  update-image:
    docker:
      - image: circleci/python:3.8-buster

    build:  # Necessary for passing env vars (https://circleci.com/docs/2.0/env-vars/#alpine-linux)
      shell: /bin/sh -leo pipefail
      environment:
        - BASH_ENV: /etc/profile

    steps:
      - set-envs
      - test-envs
      - checkout
      - aws-ecr/build-and-push-image:
          repo: "${TF_VAR_aws_ecr_repository_name}"
          skip-when-tags-exist: false
          tag: "latest,${CIRCLE_SHA1}"
          create-repo: true

  deploy-update:
    docker:
      - image: circleci/python:3.8-buster

    steps:
      - set-envs
      - test-envs
      - checkout
      - aws-ecs/update-service:
          family: "${TF_VAR_aws_ecs_task_web_name}"
          cluster-name: "${TF_VAR_aws_ecs_cluster_name}"
          service-name: "${TF_VAR_aws_ecs_service_web_name}"
          force-new-deployment: true
          #container-image-name-updates: "container=${AWS_ECS_SERVICE_NAME},tag=${CIRCLE_SHA1}"

workflows:
  build-and-deploy:
    jobs:
      - update-infrastructure
      - update-image
      - deploy-update:
          requires:
            - update-infrastructure
            - update-image
