version: 2.1

parameters:
  app-name:
    type: string
    default: "playground"

orbs:
  aws-ecr: circleci/aws-ecr@6.14.0
  aws-ecs: circleci/aws-ecs@1.4.0
  aws-cli: circleci/aws-cli@1.3.0
  terraform: circleci/terraform@1.1.0

commands:
  set-terraform-envs:
    description: Reusable command for setting up env vars
    steps:
      - run:
          name: Proxy env vars to Terraform vars
          command: |
            # Exporting environment variables and setting them as
            # TF_VAR prefixed names so we don't have to manually pass them to terraform via -var.

            # First, pass secrets from CircleCI project settings
            echo "export TF_VAR_aws_access_key=$AWS_ACCESS_KEY_ID" >> $BASH_ENV
            echo "export TF_VAR_aws_secret_key=$AWS_SECRET_ACCESS_KEY" >> $BASH_ENV
            echo "export TF_VAR_aws_region=$AWS_REGION" >> $BASH_ENV
            echo "export TF_VAR_aws_account_id=$AWS_ACCOUNT_ID" >> $BASH_ENV

            # Then set vars for deployment
            echo "export TF_VAR_app_name=<< pipeline.parameters.app-name >>" >> $BASH_ENV

            # And some more useful generated variables
            echo "export AWS_ECR_ACCOUNT_URL=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com" >> $BASH_ENV

jobs:
  update-infrastructure:
    docker:
      - image: hashicorp/terraform:light

    # Necessary for passing env vars (https://circleci.com/docs/2.0/env-vars/#alpine-linux)
    shell: /bin/sh -leo pipefail
    environment:
      - BASH_ENV: /etc/profile

    steps:
      - set-terraform-envs
      - checkout
      - run:
          name: Terraform init & apply
          command: |
            cd terraform-playground
            terraform init -backend-config="access_key=${AWS_ACCESS_KEY_ID}" -backend-config="secret_key=${AWS_SECRET_ACCESS_KEY}" -backend-config="region=${AWS_REGION}"
            terraform plan
            terraform apply -auto-approve

  update-image:
    docker:
      - image: circleci/python:3.8-buster

    steps:
      - set-terraform-envs
      - checkout
      - setup_remote_docker
      - aws-ecr/build-and-push-image:
          repo: "<< pipeline.parameters.app-name >>"
          skip-when-tags-exist: false
          tag: "latest,${CIRCLE_SHA1}"
          create-repo: true

  deploy-update:
    docker:
      - image: circleci/python:3.8-buster

    steps:
      - set-terraform-envs
      - checkout
      - aws-cli/install
      - aws-cli/setup:
          aws-region: "AWS_REGION"
      - aws-ecs/update-service:
          cluster-name: "<< pipeline.parameters.app-name >>"
          family: "<< pipeline.parameters.app-name >>Task-web"
          service-name: "<< pipeline.parameters.app-name >>ervice-web"
          force-new-deployment: true
      - aws-ecs/update-service:
          cluster-name: "<< pipeline.parameters.app-name >>"
          family: "<< pipeline.parameters.app-name >>Task-celery"
          service-name: "<< pipeline.parameters.app-name >>Service-celery"
          force-new-deployment: true
      - aws-ecs/update-service:
          cluster-name: "<< pipeline.parameters.app-name >>"
          family: "<< pipeline.parameters.app-name >>Task-flower"
          service-name: "<< pipeline.parameters.app-name >>Service-flower"
          force-new-deployment: true

workflows:
  build-and-deploy:
    jobs:
      - update-infrastructure
      - update-image
      - deploy-update:
          requires:
            - update-infrastructure
            - update-image
