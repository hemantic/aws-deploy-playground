version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.14.0
  aws-ecs: circleci/aws-ecs@1.4.0
  terraform: circleci/terraform@1.1.0


# AWS_ACCOUNT_ID
# AWS_ACCESS_KEY_ID
# AWS_SECRET_ACCESS_KEY

# AWS_REGION – eu-north-1
# AWS_ECR_REPOSITORY_NAME – ecr_playground_repo
# AWS_ECS_TASK_NAME – ecs_playground_task_web, ecs_playground_task_celery
# AWS_ECS_SERVICE_NAME – ecs_playground_service_web, ecs_playground_service_celery
# AWS_ECS_CLUSTER_NAME – ecs_playground_cluster


#orbs:
#  aws-ecr: circleci/aws-ecr@0.0.2
#  aws-ecs: circleci/aws-ecs@0.0.10

jobs:
  terraform-plan:
    docker:
      - image: hashicorp/terraform:light

    steps:
      - checkout
      - run:
          name: Terraform init & plan
          command: |
            cd terraform-playground
            terraform init
            source setup_env.sh
            terraform plan

  terraform-apply:
    docker:
      - image: hashicorp/terraform:light

    steps:
      - checkout
      - run:
          name: Terraform init & apply
          command: |
            cd terraform-playground
            terraform init
            source setup_env.sh
            terraform apply -auto-approve

workflows:
  build-and-deploy:
    jobs:
      - terraform-plan

      - terraform-apply:
          requires:
            - terraform-plan

      - aws-ecr/build-and-push-image:
          repo: "${AWS_ECR_REPOSITORY_NAME}"
          skip-when-tags-exist: false
          tag: "latest,${CIRCLE_SHA1}"
          path: src

      - aws-ecs/deploy-service-update:
          requires:
            - aws-ecr/build-and-push-image
            - terraform-apply

          aws-region: ${AWS_DEFAULT_REGION}

          family: "${AWS_ECS_SERVICE_NAME}"
          cluster-name: "${AWS_ECS_CLUSTER_NAME}"
          container-image-name-updates: "container=${AWS_ECS_SERVICE_NAME},tag=${CIRCLE_SHA1}"
